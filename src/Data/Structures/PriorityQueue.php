<?php
/* Digraph Core | https://gitlab.com/byjoby/digraph-core | MIT License */
namespace Digraph\Data\Structures;

class PriorityQueue extends AbstractQueueLikeStructure
{
    /**
     * how to sort items when retrieving them for pull/peek
     * priority queues sort by the 'p' key in the JSON that makes
     * up item names, then by data_id like a normal queue
     */
    const SORT = 'DSJSON(`data_name`,$.p) DESC, data_id ASC';

    /**
     * Put an item into the data structure.
     *
     * @param mixed $value can be anything serializable to JSON
     * @param int $priority how high priority this item is (higher comes out first)
     * @return bool
     */
    public function put($value, int $priority)
    {
        $name = $this->makeName($value, $priority);
        return $this->set(
            $name,
            $value
        );
    }

    /**
     * Each item inserted needs a name assigned to it. By default this is just
     * a uniqid generated by PHP. For something like a priority queue it could
     * be used to store priority information as well.
     *
     * Priority Queues put their parent makeName into a json-encoded array
     * with their priority level, so that sorting can happen in SQLite.
     *
     * @param mixed $value the value being added
     * @param int $p the priority of this item (higher values come out first)
     * @return string
     */
    protected function makeName($value, $p)
    {
        return json_encode([
            'p' => $p,
            'i' => parent::makeName($value)
        ]);
    }
}
