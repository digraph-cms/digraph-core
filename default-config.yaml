send-content-length-header: true
site_id: ${url.base}
timezone: GMT-0

# settings regarding urls
urls:
  # aliases
  aliases:
    '?arg_parent/': home

actions:
  uiforguests: true
  categorical:
    '*': []
    _controlpanel:
      config: _controlpanel/config
      filestorecleanup: _filestorecleanup/display
      logging: _logging/display
      sitemap: _controlpanel/sitemap
      trash: _trash/display
  proper:
    '*':
      clearcache: !id/clearcache
      delete: !id/delete
      edit: !id/edit
      rawdump: !id/rawdump
      rawedit: !id/rawedit
  common:
    '*': []
    '_user/guest':
      signin: _user/signin
      signup: _user/signup
    '_user/signedin':
      signout: _user/signout
      controlpanel: _controlpanel/display

groups: []

# rules that can be used for sorting children
# must be SQL that can be passed to a Search's order() method
child_sorting:
  default: ${child_sorting.date_desc}
  date_asc: ${dso.modified.date} ASC
  date_desc: ${dso.modified.date} DESC
  name_asc: ${digraph.name} ASC
  name_desc: ${digraph.name} DESC
  manual_before: ${child_sorting.date_desc}
  manual_after: ${child_sorting.date_asc}

excluded_child_types: []

image:
  #gd, imagick or gmagick -- gd is the default because it's widely supported
  driver: gd
  cache:
    ttl: 604800 #one week in seconds
    dir: ${paths.cache}/image
  preset_base:
    size: 3840 2160 inset
    strip_exif: true
  presets:
    default: []
    tag-embed:
      size: 800 600 inset
    filestore-thumbnail:
      size: 88 112 cover
      extension: jpg
      save:
        jpeg_quality: 60

filestore:
  path: ${paths.storage}/filestore
  icons:
    html:
      archive: <i class="fas fa-file-archive"></i>
      audio: <i class="fas fa-file-audio"></i>
      blank: <i class="fas fa-file"></i>
      code: <i class="fas fa-file-code"></i>
      csv: <i class="fas fa-file-csv"></i>
      excel: <i class="fas fa-file-excel"></i>
      image: <i class="fas fa-file-image"></i>
      pdf: <i class="fas fa-file-pdf"></i>
      powerpoint: <i class="fas fa-file-powerpoint"></i>
      signature: <i class="fas fa-file-signature"></i>
      text: <i class="fas fa-file-alt"></i>
      video: <i class="fas fa-file-video"></i>
      word: <i class="fas fa-file-word"></i>
    default: ${filestore.icons.html.blank}
    mime_left:
      text: ${filestore.icons.html.text}
      image: ${filestore.icons.html.image}
    extension:
      csv: ${filestore.icons.html.csv}
    # mime_full:
    #   -
  chmod: # note: these are octal
    dir: 0o775
    file: 0o774

filters:
  labels:
    default: ${strings.filters.default}
    text-safe: ${strings.filters.text-safe}
    text-unsafe: ${strings.filters.text-unsafe}
    markdown-safe: ${strings.filters.markdown-safe}
    markdown-unsafe: ${strings.filters.markdown-unsafe}
    html: ${strings.filters.html}
    html-unsafe: ${strings.filters.html-unsafe}
  extras:
    bbcode_basic: true
    bbcode_advanced: true
    bbcode_extended: true
    bbcode_unsafe: true
  presets:
    default:
      - [preset,markdown-safe]
    text-safe:
      - [class,sanitize]
      - [class,text]
      - [class,xss]
    text-unsafe:
      - [class,text]
    markdown-safe:
      - [class,sanitize]
      - [class,markdown]
      - [class,xss]
    markdown-unsafe:
      - [class,markdown]
    html:
      - [class,htmlfilter]
      - [class,xss]
    html-unsafe: []
    _sanitize:
      - [class,allhtmlfilter]
      - [class,xss]
  classes:
    allhtmlfilter: Digraph\Filters\AllHTMLFilter
    htmlfilter: Digraph\Filters\HTMLFilter
    markdown: Digraph\Filters\MarkdownFilter
    sanitize: Digraph\Filters\SanitizeFilter
    text: Digraph\Filters\TextFilter
    xss: Digraph\Filters\XSSFilter
    bbcode_basic: Digraph\Filters\BBCode\BBCodeBasicFilter
    bbcode_advanced: Digraph\Filters\BBCode\BBCodeAdvancedFilter
    bbcode_extended: Digraph\Filters\BBCode\BBCodeExtendedFilter
    bbcode_unsafe: Digraph\Filters\BBCode\BBCodeUnsafeFilter
  htmlfilter:
    allowed: [a,b,blockquote,code,del,dd,dl,em,figure,figcaption,h1,h2,h3,h4,h5,h6,i,img,li,ol,p,pre,s,sup,sub,strong,strike,ul,br,hr]

permissions:
  content:
    unpublished/view:
      - allow group webmaster, editor
  url:
    '*':
      - deny all
    '*/display':
      - allow all
    '*/file':
      - allow all
    '_user/*':
      - allow all
    '*/clearcache':
      - allow group webmaster
    '_logging/*':
      - deny all
      - allow group webmaster
    '*/rawdump':
      - allow group webmaster
    '*/rawedit':
      - allow group webmaster
    '*/edit':
      - allow group webmaster, editor
    '*/order':
      - allow group webmaster, editor
    '*/add':
      - allow group webmaster, editor
    '*/delete':
      - allow group webmaster, editor
    _trash/*:
      - deny all
      - allow group webmaster, editor
    _filestorecleanup/*:
      - deny all
      - allow group webmaster
    _controlpanel/*:
      - deny all
      - allow group webmaster
    _controlpanel/display:
      - deny all
      - allow group editor, webmaster
    _controlpanel/sitemap:
      - allow group editor
  add:
    '*':
      - allow all
  filter:
    '*':
      - deny all
      - allow group webmaster
    'preset/default':
      - allow all
    'unsafe':
      - deny all
      - allow group webmaster
    'safe':
      - allow all
    'preset/html':
      - allow group webmaster, editor
    'extra/*':
      - deny all
      - allow group webmaster
    'extra/bbcode_basic':
      - allow all
    'extra/bbcode_advanced':
      - allow group editor
    'extra/bbcode_extended':
      - allow group editor

navigation:
  menus:
    main:
      - home
      - {children: home}
  # Define parentage rules for breadcrumbs
  parents:
    # fallback parent is used when nothing else can be found, this will almost
    # always wind up the root of the breadcrumb
    fallback: home
    # rules for noun/verb combinations with proper nouns
    proper:
      '*/*': !noun/display
      '*/display': false
      '*/sitemap': _controlpanel/sitemap
    # rules for noun/verb combinations with common nouns
    common:
      '*/*': !noun/display
      '*/display': false
      _controlpanel/display: _controlpanel/display
      _filestorecleanup/display: _controlpanel/display
      _logging/display: _controlpanel/display
      _trash/display: _controlpanel/display
      _trash/item: _trash/factory?factory=!arg_factory
      _user/*: _user/display
      _user/display: false

types:
  system:
    user: \Digraph\Users\
    default: \Destructr\DSO
  content:
    default: \Digraph\DSO\Noun
  users:
    simple: \Digraph\Users\Managers\Simple\SimpleUser
    default: ${types.users.simple}
  logging:
    default: \Digraph\Logging\LogEntry

url:
  protocol: ''
  domain: ''
  path: /
  base: ${url.protocol}${url.domain}${url.path}

paths:
  storage: ${paths.site}/storage

# template/display configuration options
templates:
  # default template for page rendering
  default: default.twig
  # templates.theme can be either a single theme name or an array of theme names
  # that will have their css/js included after core code, in the given order
  theme: null
  # paths where we should look for templates -- later items win
  paths:
    core: ${paths.core}/templates
    site: ${paths.site}/templates
  # config options passed to twig environment
  twigconfig:
    cache: ${paths.cache}/twig
    auto_reload: true
  # css urls to be linked in the head
  css:
    digraph_core: ${url.base}_digraph/core.css
    fontawesome: https://use.fontawesome.com/releases/v5.5.0/css/all.css
  # css bundles can be included all at once in media-driven css files, with
  # syntax like: /*${bundle:digraph_core}*/
  cssbundles:
    digraph_core:
      core_hypersemantic: _digraph/hypersemantic/bundle.css
      core_navigation: _digraph/core-css/navigation.css
      core_notifications: _digraph/notifications/notifications.css
      core_forms: _digraph/core-css/forms.css
      core_actionbar: _digraph/actionbar/actionbar.css
      core_filestore: _digraph/core-css/filestore.css
      core_blocks: _digraph/core-css/blocks.css
      core_print: _digraph/core-css/print.css
    hypersemantic:
      typography: _digraph/hypersemantic/typography.css
      menus: _digraph/hypersemantic/menus.css
      layout: _digraph/hypersemantic/layout-1col.css
      layout2: _digraph/hypersemantic/layout-digraph.css
    site:
      site_styles: site_styles.css
  # js files are included at either the head or foot of the page
  js:
    head:
      digraph_obj: ${url.base}_digraph/init.js
      digraph_user: ${url.base}_user/user.js
    foot:
      digraph_core: ${url.base}_digraph/core.js
  # js bundles can be included the same way as css bundles
  jsbundles:
    digraph_core:
      core_notifications: _digraph/notifications/notifications.js
      core_actionbar: _digraph/actionbar/actionbar.js
      core_forms: _digraph/core-js/forms.js
    site:
      site_script: site_script.js

routing:
  paths:
    core: ${paths.core}/routes

modules:
  sources:
    100-core: dir ${paths.core}/modules
    # this is how you load a class-based module
    # 100-system: class \Digraph\Modules\DigraphSystem\Module

users:
  defaultmanager: default
  managers:
    default:
      name: Built-in
      class: Digraph\Users\Managers\Simple\SimpleUserManager
      signup: true
      signin: true
    'null':
      name: Null users
      class: Digraph\Users\Managers\Null\NullUserManager
      signup: false
      signin: false
    system:
      name: System users
      class: Digraph\Users\Managers\Null\NullUserManager
      signup: false
      signin: false
  groups:
    guests: [guest]
    allusers: [user]
    canroot:
      config: false
    sources:
      config:
        class: Digraph\Users\GroupSources\ConfigGroups
        args: []
  namespacing:
    # possible values for users.namespacing.mode
    # auth: one namespace for public, one for authenticated users
    # id: full user ID, which is guaranteed to be unique
    # username: just the username portion, which *should* all be the same person via different auth methods
    # groups: namespaced based on full list of groups users belong to, groups can be ignored by adding them to users.namespacing.ignore
    mode: groups

fullmunge:
  - setup
  - build
  - error
  - template
  - finalize
  - render

mungers:
  setup:
    # Initializes namespace based on current user and users.namespacing config
    100-userinitialize: Digraph\Users\UserMunger
    # Loads package defaults and builds the hash
    200-initialize: Digraph\Mungers\Setup\Initialize
    # parses the URL
    300-parseurl: Digraph\Mungers\Setup\ParseUrl
    # Checks for mediahelper hits on the current url
    400-media: Digraph\Media\MediaMunger
    # Resolves slugs and identifies the object that is being referenced, if any
    # This is also where 300 pages are triggered, if slugs resolve to multiple pages
    # This is also where redirects are triggered for normalizing URLs
    500-locate: Digraph\Mungers\Setup\Locate
  build:
    # Checks permissions, throws 403 errors
    500-permissions: Digraph\Permissions\PermissionsMunger
    # Tries to match verb/noun to a route handler file
    # this is where 404 errors originate
    400-route: Digraph\Mungers\Build\Route
    # Executes handler files and puts their output into the package
    600-execute: Digraph\Mungers\Build\Execute
    # Tweaks templates if called for by output filters
    900-outputfilter: Digraph\OutputFilters\OutputFilterPrefilterMunger
  # Builds content of error pages if status isn't 200
  error:
    # Builds error pages based on status
    # uses @error route folder, and extends teh Execute munger so it presents
    # the same environment to handlers
    100-error: Digraph\Mungers\Error\Error
  # Applies templates
  template:
    # Applies templates based on package.response.template and package.fields
    100-templates: Digraph\Templates\TemplateMunger
  # Any final preparation before output
  finalize:
    # Applies output filters to content, these can be used to transform content
    # in complex ways, such as converting HTML output to PDF
    050-outputfilter: Digraph\OutputFilters\OutputFilterMunger
    # Builds HTTP headers, but doesn't output them, saves them in response.headers
    100-headers: Digraph\Mungers\Finalize\Headers
  # Outputs package to the browser
  render:
    # Outputs headers from response.headers
    100-headers: Digraph\Mungers\Render\Headers
    # Outputs with readfile() if response.readfile is set, otherwise just echoes
    # response.content
    200-output: Digraph\Mungers\Render\Output

helpers:
  initialized:
    modules: true
  classes:
    actions: Digraph\Helpers\Actions
    blocks: Digraph\Blocks\BlockHelper
    filestore: Digraph\FileStore\FileStoreHelper
    filters: Digraph\Filters\FilterHelper
    forms: Digraph\Forms\FormHelper
    image: Digraph\FileStore\ImageHelper
    log: Digraph\Logging\LogHelper
    media: Digraph\Media\MediaHelper
    modules: Digraph\Modules\ModuleHelper
    navigation: Digraph\Templates\NavigationHelper
    notifications: Digraph\Templates\NotificationsHelper
    outputfilters: Digraph\OutputFilters\OutputFilterHelper
    permissions: Digraph\Permissions\PermissionsHelper
    routing: Digraph\Helpers\Routing
    session: Digraph\Users\SessionHelper
    strings: Digraph\Helpers\Strings
    templates: Digraph\Templates\TemplateHelper
    urls: Digraph\Urls\UrlHelper
    users: Digraph\Users\UserHelper

forms:
  maps:
    default:
      000_digraph_name:
        field: digraph.name
        label: ${strings.forms.digraph_name_label}
        class: Digraph\Forms\Fields\Name
        required: true
      001_digraph_title:
        field: digraph.title
        label: ${strings.forms.digraph_title_label}
        class: Formward\Fields\Input
      100_digraph_slug:
        field: digraph.slug
        label: ${strings.forms.slug_label}
        class: Digraph\Forms\Fields\Slug
      900_digraph_published:
        field: digraph.published
        label: ${strings.forms.published_label}
        class: Digraph\Forms\Fields\Published
      500_digraph_body:
        field: digraph.body
        label: ${strings.forms.digraph_body_label}
        class: Digraph\Forms\Fields\Content

defaultnoun:
  digraph:
    body:
      filter: default
      text: ""
      extra:
        bbcode_basic: true

mungerhooks:
  build: []
  render: []

media:
  get_cache_ttl: 60
  package:
    response:
      ttl: 86400 # one day in seconds
      headers:
        pragma: public

  paths:
    digraph_core: ${paths.core}/media

cache:
  mungercache:
    adapter: default
    threshold: 10 #ms
  factorycache:
    adapter: default
    threshold: 5 #ms
  adapters:
    default:
      items:
        class: \Symfony\Component\Cache\Adapter\FilesystemAdapter
        args:
          namespace: 'default'
          defaultlifetime: 60
          directory: ${paths.cache}/defaultcache
      tags: null

package:
  defaults:
    fields:
      page_title: ${page_name}
      favicon: ${url.base}favicon/favicon.ico
    request:
      namespace: public
    response:
      status: 200
      ttl: 600 # default 10 minute cache ttl
      cacheable: true
      content: ''
      ready: false
      mime: text/html
      charset: utf-8
      disposition: inline

# bootstrap settings are used by the Bootstrapper class, and are then removed
# from the config used in the created CMS. This is a nice secure way to handle
# setting up drivers and factories, and you should use it if at all possible.
bootstrap:
  credentials:
    default: []
  drivers:
    default:
      credentials: default
  factories:
    content:
      class: \Digraph\DSO\ContentFactory
      driver: default
      table: digraph_content
    users:
      class: \Digraph\Users\UserFactory
      driver: default
      table: digraph_users
    logging:
      class: \Digraph\Logging\LogFactory
      driver: default
      table: digraph_log
