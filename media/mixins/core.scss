@function contrast-color($color) {
    @if (lightness($color) > 50) {
        @return #000;
    } @else {
        @return #fff;
    }
}

@mixin focused {
    outline: $border-unit solid $color-interactive;
    outline-offset: -$border-unit;
    position: relative;
}

@mixin button {
    display: block;
    box-sizing: border-box;
    background: $color-interactive;
    color: contrast-color($color-interactive) !important;
    display: inline-block;
    padding: $grid-unit/2;
    margin: 0;
    border: 0;
    cursor: pointer;
    z-index: 1;
    border-radius: $border-radius;
    font-weight: bold;
    font-family: $font-ui;
    text-decoration: none !important;
    width: auto;

    &:hover {
        filter: saturate(1.5);
        z-index: 2;
    }

    &:active {
        filter: saturate(2);
        transform: scale(1);
    }

    &.button--confirmation {
        background: $color-confirmation;
        color: contrast-color($color-confirmation) !important;
    }

    &.button--info {
        background: $color-info;
        color: contrast-color($color-info) !important;
    }

    &.button--warning {
        background: $color-warning;
        color: contrast-color($color-warning) !important;
    }

    &.button--error {
        background: $color-error;
        color: contrast-color($color-error) !important;
    }

    &.button--inverted {
        background: mix($body-bg, $color-neutral, 90%);
        color: $color-interactive !important;

        &.button--confirmation {
            color: $color-confirmation !important;
        }

        &.button--info {
            color: $color-info !important;
        }

        &.button--warning {
            color: $color-warning !important;
        }

        &.button--error {
            color: $color-error !important;
        }
    }
}

@mixin button-confirmation {
    @include button;
    background: $color-confirmation;
    color: contrast-color($color-confirmation);
}

@mixin button-info {
    @include button;
    background: $color-info;
    color: contrast-color($color-info);
}

@mixin button-warning {
    @include button;
    background: $color-warning;
    color: contrast-color($color-warning);
}

@mixin button-error {
    @include button;
    background: $color-error;
    color: contrast-color($color-error);
}

@mixin loading-overlay {
    position: relative;

    &:before,
    &:after {
        display: block;
        visibility: hidden;
        position: absolute;
        z-index: -1;
    }

    &:before {
        content: "";
        z-index: 100;
        background: rgba($body-bg, 0.95);
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: block;
    }

    &:after {
        @include material-icon;
        z-index: 101;
        color: $color-interactive;
        font-size: 2*$grid-unit;
        content: "sync";
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    &.loading {
        min-height: 3*$grid-unit;
        &:before,
        &:after {
            visibility: visible;
        }

        &:after {
            font-size: 3em;
            animation-name: spin-loading-overlay;
            animation-duration: 2000ms;
            animation-iteration-count: infinite;
            animation-timing-function: linear;
            z-index: 1000;
        }
    }

    &.error {
        &:after {
            font-size: 3em;
            color: $color-error;
            content: "error";
            animation: none;
        }
    }
}

@mixin uncolored-links {
    a,
    a:link,
    a:active,
    a:hover,
    a:focus,
    a:visited {
        color: inherit;
        text-decoration: none;
    }
    a:hover {
        text-decoration: underline;
    }
}

@mixin drop-shadow($height: 1) {
    box-shadow: rgba($body-fg, 0.5-$height/5) 0 $grid-unit * $height/8 $grid-unit * $height/2;
}
